compilationUnit -> LBRACE fileContent RBRACE

fileContent -> functionsDeclaration* mainDeclaration
mainDeclaration -> main LPAREN RPAREN methodBody

functionsDeclaration -> methodDeclaration

methodDeclaration -> typeOrVoid IDENTIFIER formalParameters methodBody

methodBody -> block


block -> LBRACE blockStatement* RBRACE

blockStatement -> localVariableDeclaration
blockStatement -> statement

localVariableDeclaration -> variableDeclaratorId COLON type ( ASSIGN_LEFT variableInitializer )?
localVariableDeclaration -> variableInitializer ASSIGN_RIGHT variableDeclaratorId COLON type
localVariableDeclaration -> type variableDeclarators

statement -> block
statement -> IF parExpression statement (ELSE statement)?
statement -> FOREACH LPAREN forControl RPAREN statement
statement -> WHILE parExpression statement
statement -> DO statement WHILE parExpression
statement -> SWITCH parExpression LBRACE switchBlockStatementGroup* switchLabel* RBRACE
statement -> RETURN expression?
statement -> BREAK IDENTIFIER?
statement -> CONTINUE IDENTIFIER?
statement -> writeToStd
statement -> readFromStd
statement -> expression
statement -> comment

comment -> '//' literal

forControl -> foreachControl
forControl -> forInit? COMMA expression? COMMA expressionList?

foreachControl -> type variableDeclaratorId IN expression

forInit -> localVariableDeclaration
forInit -> expressionList

switchBlockStatementGroup -> switchLabel+ blockStatement+

switchLabel -> CASE (expression | IDENTIFIER) COLON
switchLabel -> DEFAULT COLON

writeToStd -> WRITE (expression | IDENTIFIER)* (expression | IDENTIFIER)+

readFromStd -> READ IDENTIFIER

variableDeclarators -> variableDeclarator (COMMA variableDeclarator)*

variableDeclarator -> variableDeclaratorId ( ASSIGN_LEFT variableInitializer )?
variableDeclarator -> ( variableInitializer ASSIGN_RIGHT ) variableDeclaratorId

variableDeclaratorId -> IDENTIFIER

variableInitializer -> expression


parExpression -> LPAREN expression RPAREN

expressionList -> expression (COMMA expression)*

expression -> primary
expression -> expression bop=DOT
      ( IDENTIFIER
      | methodCall
      )
expression -> methodCall
expression -> LPAREN type RPAREN expression
expression -> expression postfix=(INC | DEC)
expression -> prefix=(ADD | SUB | INC | DEC) expression
expression -> prefix=(TILDE | BANG) expression
expression -> expression bop=(MUL |DIV|MOD) expression
expression -> expression bop=(ADD|SUB) expression
expression -> expression (LT LT | GT GT GT | GT GT) expression
expression -> expression bop=(LE | GE | GT | LT) expression
expression -> expression bop=(EQUAL | NOTEQUAL ) expression
expression -> expression bop=CARET expression
expression -> expression bop=AND expression
expression -> expression bop=OR expression
expression -> expression bop=QUESTION expression COLON expression
expression -> bop=(ASSIGN_LEFT | ASSIGN_RIGHT | ADD_ASSIGN | SUB_ASSIGN | MUL_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | RSHIFT_ASSIGN | URSHIFT_ASSIGN | LSHIFT_ASSIGN | MOD_ASSIGN) expression

primary -> ( expression )
primary -> literal
primary -> IDENTIFIER

methodCall -> IDENTIFIER ( expressionList? )


typeOrVoid -> type
typeOrVoid -> VOID

type -> (primitiveType)

primitiveType -> BOOLEAN
primitiveType -> INT
primitiveType -> FLOAT
primitiveType -> ANY


formalParameters -> ( formalParameterList? )

formalParameterList -> formalParameter (COMMA formalParameter)*

formalParameter -> type variableDeclaratorId

literal -> integerLiteral
literal -> floatLiteral
literal -> STRING_LITERAL
literal -> BOOL_LITERAL
literal -> NULL_LITERAL

integerLiteral -> DECIMAL_LITERAL
integerLiteral -> BINARY_LITERAL

floatLiteral -> FLOAT_LITERAL